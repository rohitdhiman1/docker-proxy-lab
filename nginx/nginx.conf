events {
    worker_connections 1024;
}

http {
    # Rate limiting zone - 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
    
    # Access log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Upstream backends with load balancing
    upstream backend_pool {
        # Load balancing method: round-robin (default)
        # Alternatives: least_conn, ip_hash
        least_conn;
        
        server backend1:80 max_fails=3 fail_timeout=30s;
        server backend2:80 max_fails=3 fail_timeout=30s;
        server backend3:80 max_fails=3 fail_timeout=30s;
        server backend4:80 max_fails=3 fail_timeout=30s;
    }
    
    # Sticky session backend (IP hash)
    upstream sticky_backend {
        ip_hash;
        server backend1:80;
        server backend2:80;
    }

    # HTTP Server - Redirect to HTTPS
    server {
        listen 80;
        server_name localhost;
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS Server with SSL/TLS and Basic Auth
    server {
        listen 443 ssl;
        server_name localhost;
        
        # SSL Configuration
        ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Rate limiting applied
        limit_req zone=one burst=20 nodelay;
        
        # Basic Authentication (optional - uncomment to enable)
        # auth_basic "Restricted Access";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        # Load balanced backend
        location / {
            proxy_pass http://backend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Sticky session endpoint
        location /sticky/ {
            proxy_pass http://sticky_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Direct backend access (for testing)
        location /backend1/ {
            proxy_pass http://backend1:80/;
        }
        
        location /backend2/ {
            proxy_pass http://backend2:80/;
        }
        
        location /backend3/ {
            proxy_pass http://backend3:80/;
        }
        
        location /backend4/ {
            proxy_pass http://backend4:80/;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.16.0.0/12;  # Docker network
            deny all;
        }
    }
}
